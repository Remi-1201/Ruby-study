# 1 ================================================
# []で囲むと[]内のいずれかの1文字にマッチするという表現になります。

puts /[a-z]/ === "a"    #=>　true
puts /[A-Z]/ === "A"    #=>　true
puts /[あ-ん]/ === "う"  #=>　true

puts /[0-9]/ === "1"    #=>　true
# Integerクラスのオブジェクトと比較するとfalseが返ります。
puts /[0-9]/ === 1  #=>　false

# 2 ================================================
# /./ = \n = 改行

p /./ =~ "\nRuby"
#=> 1
# 改行を無視しRにマッチします。初めにマッチした文字のindexを返します。
p /./ =~ "\n\n1234"
#=> 2
# 改行を無視し1にマッチします。初めにマッチした文字のindexを返します。
p /./m =~ "\nRuby"
#=> 0
# 正規表現オプションmを付けると複数行モードになり改行にもマッチします。

# 3 ================================================
# [a-z],[A-Z] =  アルファベット小文字aからzまでのどれかの文字にマッチします。

p /[a-z]/ =~ "RUBYeXAMINAITION"
#=> 4
# アルファベット---小文字---のaからzどれか１文字にマッチし、
# 最初にマッチした---文字のindex---を返します。

p /[A-Z]/ =~ "rubyExamination"
#=> 4
# アルファベット---大文字---のaからzどれか１文字にマッチし、
# 最初にマッチした---文字のindex---を返します。

# 4 ================================================
# ¥w, ¥W = 英数字と---アンダースコア---にマッチします。
#  ¥W は ¥w 以外の文字にマッチします。

p /\w/ =~ "\t\s\n\r\f_RubyExamination"
#=> 5
# アンダースコアにマッチし、最初にマッチした---文字のindex---を返します。
p /\W/ =~ "RubyExamination_1234567890"
#=> nil
# 英数字アンダースコアどれにもマッチしなかったのでnilを返します。

# 5 ================================================
# ¥d,¥D =  数字にマッチします。
# ¥Dは¥d以外の文字にマッチします。

p /\d/ =~ "\t\s\n\r\f_Ruby2.1"
#=> 10
# 数字の2にマッチし、最初にマッチした---文字のindex---を返します。
p /\W/ =~ "1234567890"
#=> nil
# 数字以外の文字が存在しないのでマッチせず、nilを返します。
